/*
 * SI_draw.c
 *
 *  Created on: 16.06.2015.
 *      Author: Standzi, Marko, Dva geja (Urosko i Milan GAY)
 */

#include "SI_draw.h"

void draw_square_novo(Xuint32 BaseAddress){
	int i, j, k;
		for (j = 0; j < 480; j++){
			for (k = 0; k<(640/32); k++){
				i = j*(640/32) + k;
				if ((j > 200) && (j < 280) && (k > 8) && (k < 12)) {
					VGA_PERIPH_MEM_mWriteMemory(BaseAddress + GRAPHICS_MEM_OFF + i*4, 0xFFFFFFFF);
				}
				else{
					VGA_PERIPH_MEM_mWriteMemory(BaseAddress + GRAPHICS_MEM_OFF + i*4, 0x0);
				}
			}
		}
}
void draw_square(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt)
{
	int j, k;
	k = x_crdnt;

	for (j = 0 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
	{
		PUT_TO_FSL((j*(640/8) + k-2), 0x00A0A000);
		PUT_TO_FSL((j*(640/8) + k-1), 0x0A0A0A0A);
		PUT_TO_FSL((j*(640/8) + k+0), 0xA0A0A0A0);
		PUT_TO_FSL((j*(640/8) + k+1), 0x0A0A0A0A);
		PUT_TO_FSL((j*(640/8) + k+2), 0x00A0A000);
	}
}


void erase_projectile(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt)
{
	int j, k;
	k = x_crdnt;

	for (j = 2 + 32*y_crdnt; j < 30 + 32*y_crdnt; j++)
	{
		PUT_TO_FSL((j*(640/8) + k), 0x00000000);
	}
}

void erase_square(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt)
{
	int j, k;
	k = x_crdnt;

	for (j = 0 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
	{
		PUT_TO_FSL((j*(640/8) + k-2), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k-1), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+0), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+1), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+2), 0x00000000);
	}
}

void clear_graphics_screen(Xuint32 BaseAddress)
{
	int i;
	for (i = 0; i < 9600*4; i++){
	    PUT_TO_FSL(i, 0x00000000);
	}
}

void draw_X(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt)
{
	int j, k;
	k = x_crdnt;

	for (j = 0 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
	{
		PUT_TO_FSL((j*(640/8) + k-2), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k-1), 0x0AA00AA0);
		PUT_TO_FSL((j*(640/8) + k+0), 0x00AAA000);
		PUT_TO_FSL((j*(640/8) + k+1), 0x0AA00AA0);
		PUT_TO_FSL((j*(640/8) + k+2), 0x00000000);
	}
}

void erase_X(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt)
{
	int j, k;
	k = x_crdnt;

	for (j = 0 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
	{
		PUT_TO_FSL((j*(640/8) + k-2), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k-1), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+0), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+1), 0x00000000);
		PUT_TO_FSL((j*(640/8) + k+2), 0x00000000);
	}
}

void draw_red(Xuint32 BaseAddress, Xuint8 x_crdnt, Xuint8 y_crdnt, Xuint8 type)
{
	int i, j, k;
	k = x_crdnt;

	if(type == 1)
	{
		for (j = 16 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
		{
			i = j*(640/8) + k;
			if (j >= (16 + 32*y_crdnt) && j < (18 + 32*y_crdnt)) {
				PUT_TO_FSL(i-1,0x00000220);
				PUT_TO_FSL(i+1,0x02200000);
			}
			else if (j >= (18 + 32*y_crdnt) && j < (20 + 32*y_crdnt)) {
				PUT_TO_FSL(i-1,0x00000002);
				PUT_TO_FSL((i+0), 0x20000002);
				PUT_TO_FSL((i+1), 0x20000000);
			}
			else if (j >= (20 + 32*y_crdnt) && j < (22 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x00000222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22200000);
			}
			else if (j >= (22 + 32*y_crdnt) && j < (24 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x00022222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22222000);
			}
			else if (j >= (24 + 32*y_crdnt) && j < (26 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22222222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22222222);
			}
			else if (j >= (26 + 32*y_crdnt) && j < (28 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22002222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22220022);
			}
			else if (j >= (28 + 32*y_crdnt) && j < (30 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22002200);
				PUT_TO_FSL((i+1), 0x00220022);
			}
			else {
				PUT_TO_FSL((i-1), 0x00000022);
				PUT_TO_FSL((i+0), 0x22000022);
				PUT_TO_FSL((i+1), 0x22000000);
			}
		}
	}
	else
	{
		for (j = 16 + 32*y_crdnt; j < 32 + 32*y_crdnt; j++)
		{
			i = j*(640/8) + k;
			if (j >= (16 + 32*y_crdnt) && j < (18 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x00000220);
				PUT_TO_FSL((i+1), 0x02200000);
			}
			else if (j >= (18 + 32*y_crdnt) && j < (20 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22000002);
				PUT_TO_FSL((i+0), 0x20000002);
				PUT_TO_FSL((i+1), 0x20000022);
			}
			else if (j >= (20 + 32*y_crdnt) && j < (22 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22002222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22220022);
			}
			else if (j >= (22 + 32*y_crdnt) && j < (24 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22222222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22222222);
			}
			else if (j >= (24 + 32*y_crdnt) && j < (26 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x22222222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22222222);
			}
			else if (j >= (26 + 32*y_crdnt) && j < (28 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x00222222);
				PUT_TO_FSL((i+0), 0x22222222);
				PUT_TO_FSL((i+1), 0x22222200);
			}
			else if (j >= (28 + 32*y_crdnt) && j < (30 + 32*y_crdnt)) {
				PUT_TO_FSL((i-1), 0x00000220);
				//PUT_TO_FSL((i+0), 0x00000000);
				PUT_TO_FSL((i+1), 0x02200000);
			}
			else {
				PUT_TO_FSL((i-1), 0x00022000);
				//PUT_TO_FSL((i+0), 0x00000000);
				PUT_TO_FSL((i+1), 0x00022000);
			}
		}
	}
}
